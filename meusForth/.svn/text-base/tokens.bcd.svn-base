// xVM token prototypes

// ------------------------------------------
#1 - one byte tokens
// ------------------------------------------

NOP             ( -- )\nNo operation

// literals
LIT0            ( -- 0 )
LIT1            ( -- 1 )
LIT2            ( -- 2 )
LIT3            ( -- 3 )
LIT4            ( -- 4 )
LIT5            ( -- 5 )
LIT6            ( -- 6 )
LIT7            ( -- 7 )
LIT8            ( -- 8 )
LIT9            ( -- 9 )
LIT10           ( -- 10 )
LIT11           ( -- 11 )
LIT12           ( -- 12 )
LIT13           ( -- 13 )
LIT14           ( -- 14 )
LIT15           ( -- 15 )
_LIT_MINUS1     ( -- -1 )

// stack
DROP            ( x -- )\nRemove x from the stack.
TWO_DROP 2DROP  ( x1 x2 -- )\nDrop cell pair x1 x2 from the stack.
DUP             ( x -- x x )\nDuplicate x
TWO_DUP 2DUP    ( x1 x2 -- x1 x2 x1 x2 )\nDuplicate cell pair x1 x2.
SWAP            ( x1 x2 -- x2 x1 )\nSwaps two top elements of data stack
TWO_SWAP 2SWAP  ( x1 x2 x3 x4 -- x3 x4 x1 x2 )\nSwaps two top pairs of data stack
OVER            ( x1 x2 -- x1 x2 x1 )\nPushes second element on top of data stack
TWO_OVER 2OVER  ( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )\n
ROT             ( x1 x2 x3 -- x2 x3 x1 )\nRotates three top elements of data stack
TWO_ROT 2ROT    ( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)\nRotates three top element pairs of the data stack
NIP             ( x1 x2 -- x2 )\nRemoves second element from data stack
TUCK            ( x1 x2 -- x2 x1 x2)\nPut a copy of the top stack item below the second stack item
TO_RSTACK >R    ( x -- ) R:( -- x )\nTransfers top of data stack to return stack
TWO_TO_RSTACK 2>R ( x1 x2 -- ) R:( -- x1 x2 )\nTransfers two top elements of data stack to return stack
FROM_RSTACK  R>      ( -- x ) R:( x -- )\nTransfers top of return stack to data stack
TWO_FROM_RSTACK  2R> ( -- x1 x2 ) R:( x1 x2 -- )\nTransfers two top elements of return stack to data stack
FETCH_RSTACK  R@      ( -- x ) R:( x -- x ) \nCopies top of return stack to data stack
TWO_FETCH_RSTACK 2R@     ( -- x1 x2 ) R:( x1 x2 -- x1 x2 ) \nCopies two top elements of return stack to data stack

// memory access
FETCH   @       ( addr -- dat )\nReads data from specified RAM address
STORE   !       ( dat addr -- )\nWrites data to specified RAM address

// logical
AND             ( x1 x2 -- x1&x2 )\nLogical AND of two top elements of data stack
OR              ( x1 x2 -- x1|x2 )\nLogical OR of two top elements of data stack
XOR             ( x1 x2 -- x1^x2 )\nLogical XOR of two top elements of data stack
NOT             ( x -- ~x )\nLogical NOT of top element of data stack
LSHIFT <<       ( x u -- x<<u )\nShifts second element u bits left
RSHIFT >>       ( x u -- x>>u )\nShifts second element u bits right

// arithmetics
INC    1+       ( x -- x+1 )\nIncrement
ADD    +        ( x1 x2 -- x1+x2 )\nAdd
SUB    -        ( x1 x2 -- x1-x2 )\nSubtract
MUL    *        ( x1 x2 -- x1*x2 )\nMultipy
DIV    /        ( x1 x2 -- x1/x2 )\nDivide
MULDIV */       ( x1 x2 x3 -- x1*x2/x3 )\nMultiply a*b, then divide the result by c.\nIntermediate result is 32-bit

// comparison
GT  >           ( x1 x2 -- flag )\nIf x1>x2 then flag=-1 else flag=0
LT  <           ( x1 x2 -- flag )\nIf x1<x2 then flag=-1 else flag=0
GE  >=          ( x1 x2 -- flag )\nIf x1>=x2 then flag=-1 else flag=0
LE  <=          ( x1 x2 -- flag )\nIf x1<=x2 then flag=-1 else flag=0
EQ  =           ( x1 x2 -- flag )\nIf x1=x2 then flag=-1 else flag=0
NEQ !=          ( x1 x2 -- flag )\nIf x1<>x2 then flag=-1 else flag=0
EQ0 =0          ( x -- flag )\nIf x=0 then flag=-1 else flag=0
NEQ0 <>0        ( x -- flag )\nIf x!=0 then flag=-1 else flag=0
GT0 >0          ( x -- flag )\nIf x>0 then flag=-1 else flag=0
LT0 <0          ( x -- flag )\nIf x<0 then flag=-1 else flag=0

// control flow
_GOTO           ( addr -- )
_CALL           ( addr -- )
_RETURN         ( -- )
_JZ             ( reladdr x -- )\nJump if x=0
_JNZ            ( reladdr x -- )\nJump if x!=0
_RETZ           ( x -- )\nReturn if x=0
_RETNZ          ( x -- )\nReturn if x!=0

// misc
PC              ( -- pc )\nPut program counter on top of stack
SP              ( -- sp )\nPut data stack pointer on top of stack
RP              ( -- rp )\nPut return stack on top of stack
FLUSH           ( x1 x2 x3... -- )\nEmpty data stack
PRINT .         ( x -- ) Print x


// ------------------------------------------
#2 - two-byte tokens
// ------------------------------------------

_LIT            ( -- val )
_SJMP           ( -- )
_SJZ            ( a -- )
_SJNZ           ( a -- )

// ------------------------------------------
#3 - three-byte tokens
// ------------------------------------------

_LLIT           ( -- val )
_LGOTO          ( -- )
_LJMP           ( -- )
_LCALL          ( -- )
_LJZ            ( a -- )
_LJNZ           ( a -- )
